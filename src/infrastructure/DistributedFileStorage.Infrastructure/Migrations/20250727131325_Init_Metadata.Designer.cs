// <auto-generated />
using System;
using DistributedFileStorage.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DistributedFileStorage.Infrastructure.Migrations
{
    [DbContext(typeof(MetadataDbContext))]
    [Migration("20250727131325_Init_Metadata")]
    partial class Init_Metadata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DistributedFileStorage.Domain.Entities.ChunkMetadata", b =>
                {
                    b.Property<string>("ChunkId")
                        .HasColumnType("text");

                    b.Property<Guid>("FileMetadataId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("StorageProviderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ChunkId");

                    b.HasIndex("FileMetadataId");

                    b.ToTable("Chunks");
                });

            modelBuilder.Entity("DistributedFileStorage.Domain.Entities.FileMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalChecksum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("DistributedFileStorage.Domain.Entities.ChunkMetadata", b =>
                {
                    b.HasOne("DistributedFileStorage.Domain.Entities.FileMetadata", "File")
                        .WithMany("Chunks")
                        .HasForeignKey("FileMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("DistributedFileStorage.Domain.Entities.FileMetadata", b =>
                {
                    b.Navigation("Chunks");
                });
#pragma warning restore 612, 618
        }
    }
}
